/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package thinlm.ui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import thinlm.daos.ItemDAO;
import thinlm.daos.SupplierDAO;
import thinlm.utils.DBHelper;
import thinlm.dtos.ItemDTO;
import thinlm.dtos.ItemLoadData;
import thinlm.dtos.SupplierDTO;
import thinlm.dtos.SupplierLoadData;

/**
 *
 * @author Admin
 */
public class ItemManagement extends javax.swing.JFrame {

    SupplierDAO suppliers;
    ItemDAO items;
    ItemLoadData itemModel;
    SupplierLoadData supplyModel;
    boolean addNewItem = false;
    boolean addNewSupplier = false;
    private Connection con;
    private PreparedStatement pst;
    private ResultSet rs;

    /**
     * Creates new form ItemManagement
     */
    public ItemManagement() throws SQLException, ClassNotFoundException {
        initComponents();
        txtSupCode.setEditable(false);
        txtSupName.setEditable(false);
        txtAddress.setEditable(false);
        checkColla.setEnabled(false);

        txtItemCode.setEditable(false);
        txtItemName.setEditable(false);
        boxSupplier.setEditable(false);
        txtUnit.setEditable(false);
        txtPrice.setEditable(false);
        checkSupplying.setEnabled(false);

        suppliers = new SupplierDAO();
        suppliers.loadDataSup();
        supplyModel = new SupplierLoadData(suppliers);

        items = new ItemDAO();
        items.loadDataItem(suppliers);
        itemModel = new ItemLoadData(items);

        setupModel();
    }

    public void setupModel() {
        tblItems.setModel(itemModel);
        this.boxSupplier.setModel(new DefaultComboBoxModel(suppliers));
        tblSupplier.setModel(supplyModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSupplier = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSupCode = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSupName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        checkColla = new javax.swing.JCheckBox();
        btnSupAdd = new javax.swing.JButton();
        btnSupSave = new javax.swing.JButton();
        btnSupDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtItemCode = new javax.swing.JTextField();
        txtItemName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtUnit = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        boxSupplier = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        checkSupplying = new javax.swing.JCheckBox();
        btnItemAdd = new javax.swing.JButton();
        btnItemSave = new javax.swing.JButton();
        btnItemDelete = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tblSupplier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblSupplier.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblSupplierMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSupplierMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSupplier);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Supplier's Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 102))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel1.setText("Code");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Address");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Collaborating");

        btnSupAdd.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSupAdd.setForeground(new java.awt.Color(255, 0, 51));
        btnSupAdd.setText("Add new");
        btnSupAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSupAddMouseClicked(evt);
            }
        });
        btnSupAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupAddActionPerformed(evt);
            }
        });

        btnSupSave.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSupSave.setForeground(new java.awt.Color(255, 0, 51));
        btnSupSave.setText("Save");
        btnSupSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupSaveActionPerformed(evt);
            }
        });

        btnSupDelete.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnSupDelete.setForeground(new java.awt.Color(255, 0, 51));
        btnSupDelete.setText("Delete");
        btnSupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkColla))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnSupAdd)
                                .addGap(46, 46, 46)
                                .addComponent(btnSupSave, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSupDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSupName, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(txtSupCode)
                            .addComponent(txtAddress))))
                .addGap(0, 100, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSupCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSupName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(checkColla))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSupAdd)
                    .addComponent(btnSupSave)
                    .addComponent(btnSupDelete))
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Supplier", jPanel1);

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblItemsMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblItems);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item's Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 102))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Item code");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Item name");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Supplier");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Unit");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Price");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("Supplying");

        checkSupplying.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSupplyingActionPerformed(evt);
            }
        });

        btnItemAdd.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnItemAdd.setForeground(new java.awt.Color(255, 0, 51));
        btnItemAdd.setText("Add new");
        btnItemAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemAddActionPerformed(evt);
            }
        });

        btnItemSave.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnItemSave.setForeground(new java.awt.Color(255, 0, 51));
        btnItemSave.setText("Save");
        btnItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemSaveActionPerformed(evt);
            }
        });

        btnItemDelete.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnItemDelete.setForeground(new java.awt.Color(255, 0, 51));
        btnItemDelete.setText("Delete");
        btnItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnItemDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(44, 44, 44)
                                .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkSupplying))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnItemAdd)
                .addGap(60, 60, 60)
                .addComponent(btnItemSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addComponent(btnItemDelete)
                .addGap(0, 70, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(boxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(checkSupplying))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnItemAdd)
                    .addComponent(btnItemSave)
                    .addComponent(btnItemDelete))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Item", jPanel2);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 0, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("MANAGER");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(385, 385, 385))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblSupplierMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSupplierMouseClicked
        // TODO add your handling code here:
        addNewSupplier = false;
        txtSupCode.setEditable(false);
        txtSupName.setEditable(true);
        txtAddress.setEditable(true);
        checkColla.setEnabled(true);
        int row = tblSupplier.getSelectedRow();
        SupplierDTO dto = supplyModel.getDao().get(row);
        txtSupCode.setText(dto.getSupCode());
        txtSupName.setText(dto.getSupName());
        txtAddress.setText(dto.getAddress());
        checkColla.setSelected(dto.isCollaborating());
    }//GEN-LAST:event_tblSupplierMouseClicked

    private void btnSupAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSupAddMouseClicked
        // TODO add your handling code here:
        addNewSupplier = true;
        txtSupCode.setEditable(true);
        txtSupName.setEditable(true);
        txtAddress.setEditable(true);
        checkColla.setEnabled(true);
        txtSupCode.setText("");
        txtSupName.setText("");
        txtAddress.setText("");
        checkColla.setSelected(false);
    }//GEN-LAST:event_btnSupAddMouseClicked

    private void btnSupSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupSaveActionPerformed
        // TODO add your handling code here:
        if (checkIsEmptySup() != null) {
            JOptionPane.showMessageDialog(this, checkIsEmptySup());
        } else if (checkLengthSup() != null) {
            JOptionPane.showMessageDialog(this, checkLengthSup());
            txtSupCode.setText("");
            txtSupName.setText("");
            txtAddress.setText("");
            addNewSupplier = true;
        } else {
            String supCode = txtSupCode.getText();
            if (addNewSupplier == false) {
                checkUpdateSup(supCode);
            } else {
                checkAddValidSup(supCode);
            }
            String supName = txtSupName.getText();
            String address = txtAddress.getText();
            boolean colloborating = checkColla.isSelected();
            SupplierDTO supplier = new SupplierDTO(supCode, supName, address, colloborating);
            try {
                con = DBHelper.makeConnection();
                //setup sql statement
                String sql = "";
                if (addNewSupplier == true) {
                    sql = "INSERT into tblSuppliers(supCode,supName,address,collaborating)" + "values(?,?,?,?)";
                    pst = con.prepareStatement(sql);
                    pst.setString(1, supplier.getSupCode());
                    pst.setString(2, supplier.getSupName());
                    pst.setString(3, supplier.getAddress());
                    pst.setBoolean(4, supplier.isCollaborating());
                } else {
                    sql = "UPDATE tblSuppliers SET supName = ?, address= ?, collaborating= ? WHERE supCode = ?";
                    pst = con.prepareStatement(sql);
                    pst.setString(4, supplier.getSupCode());
                    pst.setString(1, supplier.getSupName());
                    pst.setString(2, supplier.getAddress());
                    pst.setBoolean(3, supplier.isCollaborating());
                }

                int n = pst.executeUpdate();
                if (n > 0) {

                    if (addNewSupplier == false) {
                        int pos = tblSupplier.getSelectedRow();
                        supplyModel.getDao().set(pos, supplier);
                        JOptionPane.showMessageDialog(this, "The infor has been updated!!!");
                    } else {
                        supplyModel.getDao().add(supplier);
                        JOptionPane.showMessageDialog(this, "The infor has been added!!!");
                    }
                    tblSupplier.updateUI();
                    txtSupCode.setText("");
                    txtSupName.setText("");
                    txtAddress.setText("");
                    checkColla.setSelected(false);
                    addNewSupplier = false;
                }
            } catch (SQLException ex) {
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnSupSaveActionPerformed

    private void btnSupDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupDeleteActionPerformed
        // TODO add your handling code here:
        ListSelectionModel model = tblSupplier.getSelectionModel();
        int row = tblSupplier.getSelectedRow();
        String supCode = txtSupCode.getText();
        String supName = txtSupName.getText();
        String sql = "Delete from tblSuppliers where supCode = '" + supCode + "'";

        try {
            if (row > -1) {
                int confirm = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete " + supCode + "?");
                if (confirm == JOptionPane.YES_OPTION) {
                    if (checkSupItem(supCode, supName) == true) {
                        JOptionPane.showMessageDialog(rootPane, "This supplier code-supplier name is existed in item table!!!");
                    }
                    String msg = "The supplier " + supCode + " has been deleted from DB";
                    try {
                        con = DBHelper.makeConnection();
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    pst = con.prepareStatement(sql);
                    int n = pst.executeUpdate();

                    if (n > 0) {
                        JOptionPane.showMessageDialog(this, msg);
                        supplyModel.getDao().removeElementAt(row);
                        model.removeSelectionInterval(row, 0);
                        txtSupCode.setText("");
                        txtSupName.setText("");
                        txtAddress.setText("");
                        checkColla.setSelected(false);
                        tblSupplier.updateUI();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please choose a supplier you want to delete!!!");
            }
        } catch (SQLException e) {
//            JOptionPane.showMessageDialog(rootPane, "This supplier code-supplier name is existed in item table!!!");
        }
    }//GEN-LAST:event_btnSupDeleteActionPerformed

    private void tblSupplierMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSupplierMouseReleased
        // TODO add your handling code here
    }//GEN-LAST:event_tblSupplierMouseReleased

    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked
        // TODO add your handling code here:
        addNewItem = false;
        txtItemCode.setEditable(false);
        txtItemName.setEditable(true);
        boxSupplier.setEditable(true);
        txtUnit.setEditable(true);
        txtPrice.setEditable(true);
        checkSupplying.setEnabled(true);
        int row = tblItems.getSelectedRow();
        ItemDTO dto = itemModel.getDao().get(row);
        txtItemCode.setText(dto.getItemCode());
        txtItemName.setText(dto.getItemName());
        int i = suppliers.find(dto.getSupplier().getSupCode());
        boxSupplier.setSelectedIndex(i);
        txtUnit.setText(dto.getUnit());
        txtPrice.setText("" + dto.getPrice());
        checkSupplying.setSelected(dto.isSupplying());
    }//GEN-LAST:event_tblItemsMouseClicked

    private void tblItemsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblItemsMouseReleased

    public void checkAddValidSup(String supCode) {
//        Vector<String> data = new Vector<>();
//        for (int i = 0; i < tblSupplier.getRowCount(); i++) {
//            data.add((String) tblSupplier.getValueAt(i, 0));
//        }
        for (int i = 0; i < tblSupplier.getRowCount(); i++) {
            if (supCode.equalsIgnoreCase((String) tblSupplier.getValueAt(i, 0))) {
                JOptionPane.showMessageDialog(rootPane, "This supplier's code is valid");

            }
        }
    }

    public void checkUpdateSup(String supCode) {
        int row = tblSupplier.getSelectedRow();
        if (row > -1) {
            String check = (String) tblSupplier.getValueAt(row, 0);
            if (!supCode.equalsIgnoreCase(check)) {
                txtSupCode.setText((String) tblSupplier.getValueAt(row, 0));
                txtSupName.setText((String) tblSupplier.getValueAt(row, 1));
                txtAddress.setText((String) tblSupplier.getValueAt(row, 2));
                JOptionPane.showMessageDialog(rootPane, "Supplier's code mustn't be changed!!!");
            }
        }
    }

    public String checkIsEmptySup() {
        if (txtSupCode.getText().equals("")) {
            return "Supplier's code can't be blank!!!";
        }
        if (txtSupName.getText().equals("")) {
            return "Supplier's name can't be blank!!!";
        }
        if (txtAddress.getText().equals("")) {
            return "Supplier's address can't be blank!!!";
        }
        return null;
    }

    public String checkIsEmptyItem() {
        if (txtItemCode.getText().equals("")) {
            return "Item's code can't be blank!!!";
        }
        if (txtItemName.getText().equals("")) {
            return "Item's name can't be blank!!!";
        }
        if (txtUnit.getText().equals("")) {
            return "Item's unit can't be blank!!!";
        }
        if (txtPrice.getText().equals("")) {
            return "'Item's price can't be blank!!!";
        }

        return null;
    }

    public String checkLengthSup() {
        if (txtSupCode.getText().length() > 10) {
            return "Supplier's code is exceed the number of characters allowed(Supplier code <= 10)";
        }
        if (txtSupName.getText().length() > 50) {
            return "Supplier's name is exceed the number of characters allowed(Supplier code <= 50)";
        }
        if (txtAddress.getText().length() > 50) {
            return "Supplier's address is exceed the number of characters allowed(Supplier address <= 50)";
        }
        return null;
    }

    public String checkLengthItem() {
        if (txtItemCode.getText().length() > 10) {
            return "Item's code is exceed the number of characters allowed(Item code <= 10)";
        }
        if (txtItemName.getText().length() > 50) {
            return "Item's name is exceed the number of characters allowed(Item name <= 50)";
        }
        if (txtUnit.getText().length() > 50) {
            return "Item's unit is exceed the number of characters allowed(Item unit <= 50)";
        }
        return null;
    }

    public void checkAddValidItem(String itemCode) {
//        Vector<String> data = new Vector<>();
//        for (int i = 0; i < tblItems.getRowCount(); i++) {
//            data.add((String) tblItems.getValueAt(i, 0));
//        }
        for (int i = 0; i < tblItems.getRowCount(); i++) {
            if (itemCode.equalsIgnoreCase((String) tblItems.getValueAt(i, 0))) {
                JOptionPane.showMessageDialog(rootPane, "This item's code is valid");
            }
        }
    }

    public boolean checkSupItem(String supCode, String supName) {
        String s = supCode + "-" + supName;
        Vector<String> data = new Vector<String>();
        for (int i = 0; i < tblItems.getRowCount(); i++) {
            data.add((String) tblItems.getValueAt(i, 2));
        }
        for (int i = 0; i < data.size(); i++) {
            if (s.equals(data.elementAt(i))) {
                return true;
            }
        }
        return false;

    }
//

    public void checkUpdateItem(String itemCode) {
        int row = tblItems.getSelectedRow();
        if (row > -1) {
            String check = (String) tblItems.getValueAt(row, 0);
            if (!itemCode.equalsIgnoreCase(check)) {
                txtItemCode.setText(check);
                txtItemName.setText((String) tblItems.getValueAt(row, 1));
                boxSupplier.setSelectedItem(tblItems.getValueAt(row, 2));
                txtUnit.setText((String) tblItems.getValueAt(row, 3));
                checkSupplying.setSelected((boolean) tblItems.getValueAt(row, 5));
                JOptionPane.showMessageDialog(rootPane, "Item's code mustn't be changed!!!");
            }
        }
    }

    private void btnSupAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSupAddActionPerformed

    private void btnItemAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemAddActionPerformed
        // TODO add your handling code here:
        addNewItem = true;
        txtItemCode.setEditable(true);
        txtItemName.setEditable(true);
        boxSupplier.setEditable(true);
        txtUnit.setEditable(true);
        txtPrice.setEditable(true);
        checkSupplying.setEnabled(true);

        txtItemCode.setText("");
        txtItemName.setText("");
        txtUnit.setText("");
        txtPrice.setText("");
        checkSupplying.setSelected(false);
    }//GEN-LAST:event_btnItemAddActionPerformed

    private void btnItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemSaveActionPerformed
        // TODO add your handling code here:
        ListSelectionModel model = tblItems.getSelectionModel();
        if (checkIsEmptyItem() != null) {
            JOptionPane.showMessageDialog(this, checkIsEmptyItem());
        } else if (checkLengthItem() != null) {
            JOptionPane.showMessageDialog(this, checkLengthItem());
            txtItemCode.setText("");
            txtItemName.setText("");
            txtUnit.setText("");
            txtPrice.setText("");
            addNewItem = true;
        } else {

            try {
                String itemCode = txtItemCode.getText();
                if (addNewItem == false) {
                    checkUpdateItem(itemCode);
                } else {
                    checkAddValidItem(itemCode);
                }
                String itemName = txtItemName.getText();
                SupplierDTO supplier = (SupplierDTO) boxSupplier.getSelectedItem();
                String unit = txtUnit.getText();
                float price = Float.parseFloat(txtPrice.getText());
                if (price <= 0) {
                    JOptionPane.showMessageDialog(rootPane, "Price must be bigger than 0!!!");
                } else {
                    boolean supplying = checkSupplying.isSelected();
                    ItemDTO item = new ItemDTO(itemCode, itemName, supplier, unit, price, supplying);

                    con = DBHelper.makeConnection();
                    String sql = "";
                    if (addNewItem == true) {
                        sql = "INSERT INTO tblItems(itemCode,itemName,supCode,unit,price,supplying)" + "VALUES(?,?,?,?,?,?)";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, item.getItemCode());
                        pst.setString(2, item.getItemName());
                        pst.setString(3, item.getSupplier().getSupCode());
                        pst.setString(4, item.getUnit());
                        pst.setFloat(5, item.getPrice());
                        pst.setBoolean(6, item.isSupplying());

                    } else {
                        sql = "UPDATE tblItems SET itemName=?, supCode=?, unit=?, price=?, supplying=? WHERE itemCode=?";
                        pst = con.prepareStatement(sql);
                        pst.setString(1, item.getItemName());
                        pst.setString(2, item.getSupplier().getSupCode());
                        pst.setString(3, item.getUnit());
                        pst.setFloat(4, item.getPrice());
                        pst.setBoolean(5, item.isSupplying());
                        pst.setString(6, item.getItemCode());
                    }

                    int n = pst.executeUpdate();
                    if (n > 0) {
                        if (addNewItem == false) {
                            int row = tblItems.getSelectedRow();
                            itemModel.getDao().set(row, item);
                            model.removeSelectionInterval(row, 0);
                            JOptionPane.showMessageDialog(rootPane, "Updated!!!");
                        } else {
                            itemModel.getDao().add(item);
                            JOptionPane.showMessageDialog(rootPane, "Added!!!");
                        }
                        txtItemCode.setText("");
                        txtItemName.setText("");
                        boxSupplier.setSelectedIndex(0);
                        txtUnit.setText("");
                        txtPrice.setText("");
                        checkSupplying.setSelected(false);
                        tblItems.updateUI();
                        addNewItem = false;
                    }
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(rootPane, "Price must be a number!!!");
                addNewItem = true;
            } catch (SQLException ex) {
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassCastException ex) {
            }
        }
    }//GEN-LAST:event_btnItemSaveActionPerformed

    private void btnItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnItemDeleteActionPerformed
        // TODO add your handling code here:
        ListSelectionModel model = tblItems.getSelectionModel();
        int row = tblItems.getSelectedRow();
        String itemCode = txtItemCode.getText();
        String sql = "DELETE FROM tblItems WHERE itemCode=?";

        try {
            if (row > -1) {
                int confirm = JOptionPane.showConfirmDialog(rootPane, "Do you want to delete" + itemCode + "?");
                if (confirm == JOptionPane.YES_OPTION) {
                    String msg = "The item " + itemCode + " has been deleted from DB!!!";
                    con = DBHelper.makeConnection();
                    pst = con.prepareStatement(sql);
                    pst.setString(1, itemCode);
                    int n = pst.executeUpdate();

                    if (n > 0) {
                        JOptionPane.showMessageDialog(rootPane, msg);
                        itemModel.getDao().removeElementAt(row);
                        model.removeSelectionInterval(row, 0);
                        txtItemCode.setText("");
                        txtItemName.setText("");
                        boxSupplier.setSelectedIndex(1);
                        txtUnit.setText("");
                        txtPrice.setText("");
                        checkSupplying.setSelected(false);
                        tblItems.updateUI();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please choose a item you want to delete!!!");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnItemDeleteActionPerformed

    private void checkSupplyingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSupplyingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkSupplyingActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ItemManagement().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ItemManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxSupplier;
    private javax.swing.JButton btnItemAdd;
    private javax.swing.JButton btnItemDelete;
    private javax.swing.JButton btnItemSave;
    private javax.swing.JButton btnSupAdd;
    private javax.swing.JButton btnSupDelete;
    private javax.swing.JButton btnSupSave;
    private javax.swing.JCheckBox checkColla;
    private javax.swing.JCheckBox checkSupplying;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblSupplier;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtItemCode;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSupCode;
    private javax.swing.JTextField txtSupName;
    private javax.swing.JTextField txtUnit;
    // End of variables declaration//GEN-END:variables
}
